from bmtk.builder.auxi.edge_connectors import distance_connector
import numpy as np

# Function to assign a synapse for given synaptic probabilities
def calc_synapses(sources, target, probability):
    total_sources = len(sources)
    selected_sources = np.random.rand(total_sources) < probability
    syns = np.zeros(total_sources)
    syns[selected_sources] = 1
    return syns

## E-to-E connections
net.add_edges(source={'pop_name': 'Exc'}, target={'pop_name': 'Exc'},
              connection_rule=calc_synapses,
              connection_params={'probability': .103},
              syn_weight=3.0,
              delay=2.0,
              dynamics_params='ExcToExc.json',
              model_template='static_synapse')

### Generating I-to-I connections

## PV I-to-I
net.add_edges(source={'pop_name': 'PV'}, target={'pop_name': 'PV'},
              connection_rule=calc_synapses,
              connection_params={'probability': .472},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'PV'}, target={'pop_name': 'SST'},
              connection_rule=calc_synapses,
              connection_params={'probability': .0},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'PV'}, target={'pop_name': 'VIP'},
              connection_rule=calc_synapses,
              connection_params={'probability': .088},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

## SST I-to-I
net.add_edges(source={'pop_name': 'SST'}, target={'pop_name': 'PV'},
              connection_rule=calc_synapses,
              connection_params={'probability': .0},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'SST'}, target={'pop_name': 'SST'},
              connection_rule=calc_synapses,
              connection_params={'probability': .0},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'SST'}, target={'pop_name': 'VIP'},
              connection_rule=calc_synapses,
              connection_params={'probability': .286},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

## VIP I-to-I
net.add_edges(source={'pop_name': 'VIP'}, target={'pop_name': 'PV'},
              connection_rule=calc_synapses,
              connection_params={'probability': .022},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'VIP'}, target={'pop_name': 'SST'},
              connection_rule=calc_synapses,
              connection_params={'probability': .172},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'VIP'}, target={'pop_name': 'VIP'},
              connection_rule=calc_synapses,
              connection_params={'probability': .023},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToInh.json',
              model_template='static_synapse')


### Generating I-to-E connections
net.add_edges(source={'pop_name': 'PV'}, target={'pop_name': 'Exc'},
              connection_rule=calc_synapses,
              connection_params={'probability': .200},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToExc.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'SST'}, target={'pop_name': 'Exc'},
              connection_rule=calc_synapses,
              connection_params={'probability': .222},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToExc.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'VIP'}, target={'pop_name': 'Exc'},
              connection_rule=calc_synapses,
              connection_params={'probability': .0},
              syn_weight=-3.0,
              delay=2.0,
              dynamics_params='InhToExc.json',
              model_template='static_synapse')

### Generating E-to-I connections
net.add_edges(source={'pop_name': 'Exc'}, target={'pop_name': 'PV'},
              connection_rule=calc_synapses,
              connection_params={'probability': .114},
              syn_weight=3.0,
              delay=2.0,
              dynamics_params='ExcToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'Exc'}, target={'pop_name': 'SST'},
              connection_rule=calc_synapses,
              connection_params={'probability': .036},
              syn_weight=3.0,
              delay=2.0,
              dynamics_params='ExcToInh.json',
              model_template='static_synapse')

net.add_edges(source={'pop_name': 'Exc'}, target={'pop_name': 'VIP'},
              connection_rule=calc_synapses,
              connection_params={'probability': .038},
              syn_weight=3.0,
              delay=2.0,
              dynamics_params='ExcToInh.json',
              model_template='static_synapse')



print('Edges established.')
print(strftime("%Y-%m-%d %H:%M:%S", gmtime())) #timestamp